name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        compiler: [gcc, clang]
        generator: [Ninja, "Unix Makefiles"]
    runs-on: ${{ matrix.os }}
    name: Linux-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" 17 all
          sudo apt install -y cmake ninja-build ccache libomp-17-dev
          echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
          if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
          echo "LDFLAGS=-L/usr/lib/llvm-17/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/lib/llvm-17/include" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: build
          key: linux-${{ matrix.compiler }}-${{ matrix.generator }}-build-${{ github.sha }}
          restore-keys: linux-${{ matrix.compiler }}-${{ matrix.generator }}-build-
      - uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: linux-${{ matrix.compiler }}-${{ matrix.generator }}-ccache-${{ github.sha }}
          restore-keys: linux-${{ matrix.compiler }}-${{ matrix.generator }}-ccache-
      - run: |
          cmake -S . -B build -G "${{ matrix.generator }}" \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - run: cmake --build build --config Release --verbose
      - run: ctest --test-dir build --output-on-failure

  mac:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-14, macos-15]
        generator: [Ninja, "Unix Makefiles"]
    runs-on: ${{ matrix.os }}
    name: macOS-${{ matrix.os }}-${{ matrix.generator }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          brew install llvm libomp cmake ninja ccache
          echo "PATH=/opt/homebrew/opt/llvm/bin:/opt/homebrew/opt/ccache/libexec:$PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/opt/libomp/lib -L/opt/homebrew/opt/llvm/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/opt/libomp/include -I/opt/homebrew/opt/llvm/include" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/opt/homebrew/opt/libomp;/opt/homebrew/opt/llvm" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: build
          key: mac-${{ matrix.generator }}-build-${{ github.sha }}
          restore-keys: mac-${{ matrix.generator }}-build-
      - uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: mac-${{ matrix.generator }}-ccache-${{ github.sha }}
          restore-keys: mac-${{ matrix.generator }}-ccache-
      - run: |
          cmake -S . -B build -G "${{ matrix.generator }}" \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - run: cmake --build build --config Release --verbose
      - run: ctest --test-dir build --output-on-failure

  windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022]
    runs-on: ${{ matrix.os }}
    name: Windows-${{ matrix.os }}-MSVC
    steps:
      - uses: actions/checkout@v4
      - run: choco install cmake ninja ccache -y
      - run: cmake -S . -B build -A x64
      - run: cmake --build build --config Release --verbose
      - run: ctest --test-dir build --output-on-failure

  windows-alt:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022]
        compiler: [mingw, llvm]
        generator: [Ninja, "Unix Makefiles"]
    runs-on: ${{ matrix.os }}
    name: Windows-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.generator }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          choco install cmake ninja ccache llvm mingw -y
          echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV
          if [[ "${{ matrix.compiler }}" == "mingw" ]]; then
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
        shell: bash
      - run: |
          cmake -S . -B build -G "${{ matrix.generator }}" \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        shell: bash
      - run: cmake --build build --config Release --verbose
      - run: ctest --test-dir build --output-on-failure

